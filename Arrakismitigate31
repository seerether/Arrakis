function swapAndAddLiquidity(SwapAndAddData memory params_)
    external
    payable
    whenNotPaused
    nonReentrant
    returns (
        uint256 amount0,
        uint256 amount1,
        uint256 sharesReceived,
        uint256 amount0Diff,
        uint256 amount1Diff
    )
{
    require(
        params_.addData.amount0Max > 0 || params_.addData.amount1Max > 0,
        "Empty max amounts"
    );
    if (params_.addData.gauge != address(0)) {
        require(
            params_.addData.vault ==
                IGauge(params_.addData.gauge).staking_token(),
            "Incorrect gauge!"
        );
    }

    IERC20 token0 = IArrakisV2(params_.addData.vault).token0();
    IERC20 token1 = IArrakisV2(params_.addData.vault).token1();

    bool isToken0Weth;
    if (msg.value > 0) {
        isToken0Weth = _wrapETH(
            params_.addData.amount0Max,
            params_.addData.amount1Max,
            true,
            token0,
            token1
        );
    }

    if (
        params_.addData.amount0Max > 0 && (msg.value == 0 || !isToken0Weth)
    ) {
        token0.safeTransferFrom(
            msg.sender,
            address(this),
            params_.addData.amount0Max
        );
    }
    if (
        params_.addData.amount1Max > 0 && (msg.value == 0 || isToken0Weth)
    ) {
        token1.safeTransferFrom(
            msg.sender,
            address(this),
            params_.addData.amount1Max
        );
    }

    (
        amount0,
        amount1,
        sharesReceived,
        amount0Diff,
        amount1Diff
    ) = _swapAndAddLiquidity(params_, token0, token1);

    // Perform token transfers after completing all critical operations
    if (amount0 > 0) {
        token0.safeTransfer(msg.sender, amount0);
    }
    if (amount1 > 0) {
        token1.safeTransfer(msg.sender, amount1);
    }
}
