function swapAndAddLiquidityPermit2(SwapAndAddPermit2Data memory params_)
    external
    payable
    whenNotPaused
    nonReentrant
    returns (
        uint256 amount0,
        uint256 amount1,
        uint256 sharesReceived,
        uint256 amount0Diff,
        uint256 amount1Diff
    )
{
    require(
        params_.swapAndAddData.addData.amount0Max > 0 ||
            params_.swapAndAddData.addData.amount1Max > 0,
        "Empty max amounts"
    );
    if (params_.swapAndAddData.addData.gauge != address(0)) {
        require(
            params_.swapAndAddData.addData.vault ==
                IGauge(params_.swapAndAddData.addData.gauge)
                    .staking_token(),
            "Incorrect gauge!"
        );
    }

    IERC20 token0 = IArrakisV2(params_.swapAndAddData.addData.vault).token0();
    IERC20 token1 = IArrakisV2(params_.swapAndAddData.addData.vault).token1();

    // 1. Check the state and perform necessary validations
    _permit2SwapAndAdd(params_, token0, token1);

    // 2. Update the state and perform required effects
    (
        amount0,
        amount1,
        sharesReceived,
        amount0Diff,
        amount1Diff
    ) = _swapAndAddLiquidity(params_.swapAndAddData, token0, token1);

    // 3. Perform external interactions
    // Transfer tokens or perform other actions

    // Example: Transfer tokens after state is updated
    if (amount0 > 0) {
        token0.safeTransfer(params_.swapAndAddData.addData.receiver, amount0);
    }
    if (amount1 > 0) {
        token1.safeTransfer(params_.swapAndAddData.addData.receiver, amount1);
    }
}
